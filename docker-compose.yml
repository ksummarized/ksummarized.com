services:
  frontend:
    container_name: ks-frontend
    build:
      context: ./frontend
    command: ["npm", "run", "dev"]
    ports:
      - "8888:8888"
    develop:
      watch:
        - action: sync
          path: ./frontend
          target: /src
          ignore:
            - node_modules
        - action: rebuild
          path: package.json

  backend:
    container_name: ks-backend
    build:
      context: ./backend
      target: development
    ports:
      - "5001:80"
      - "5000:443"
    environment:
      ASPNETCORE_ENVIRONMENT: "Development"
      ConnectionStrings__KSummarized: "Host=db;Database=ksummarized;Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}"
      ASPNETCORE_Kestrel__Certificates__Default__Path: "/https/aspnetapp.pfx"
      ASPNETCORE_Kestrel__Certificates__Default__Password: "devcertpasswd"
      ASPNETCORE_URLS: "https://+:443;http://+:80"
      DOTNET_USE_POLLING_FILE_WATCHER: true  # dotnet watch uses a a polling file watcher. Required for running it in docker.
    volumes:
      - .aspnet/https:/https/:ro  # read-only on the container
    depends_on:
      db:
        condition: service_healthy
    develop:
      watch:
        - action: sync
          path: ./backend
          target: /src

  db:
    image: postgres:14.0-alpine
    container_name: ks-database
    ports:
      - "5432:5432"
    volumes:
      - ks_postgresql:/var/lib/postgresql/data
      - ./scripts/seed.sql:/docker-entrypoint-initdb.d/seed.sql
    env_file: .env
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER}'"]
      interval: 10s
      timeout: 5s
      retries: 3

  keycloak:
    build:
      context: ./keycloak
    container_name: ks-keycloak
    command: start-dev --import-realm
    env_file: .env
    ports:
      - "8080:8080"
    volumes:
      - ./keycloak/imports/realms/realm-export.json:/opt/keycloak/data/import/realm-export.json
      - ./keycloak/imports/providers:/opt/keycloak/providers/
      - ./keycloak/themes/ksummarized:/opt/keycloak/themes/ksummarized/
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # fake SMTP server to send emails
  smtp4dev:
    image: rnwood/smtp4dev:v3.1
    container_name: ks-smtp4dev
    ports:
      - "5050:80"
      - "25:25"
      - "143:143"
    volumes:
      - smtp4dev-data:/smtp4dev
    environment:
      - ServerOptions__HostName=smtp4dev

volumes:
  ks_postgresql:
  smtp4dev-data:
